연산자 (오퍼레이터)operater +- /%* &&|| ! 등 
비교연산자  < > >= <=
비트연산자 >> <<
비트논리연산자 & |
조건연산자 ()?0:0
피연산자 숫자들

자바는 기본연산 단위는 4바이트
연산하기전에 자료형을 변환해야 원하는 소수점값이나 정수값을 얻을 수 있다.
// 결론!
// 1) 자바의 최소 연산 단위는 int이다.
//    따라서 int 보다 작은 크기의 메모리 값을 다룰 때는
//    내부적으로 int로 자동 형변환을 수행한 다음에 연산을 수행한다.
//    내부적으로 자동 형변환하는 것을 
//    "암시적 형변환(implicit type conversion)"이라 부른다.
// => byte + byte = int
// => short + short = int
// => byte + short = int
// 
// 2) 연산 결과는 항상 피연산자의 타입과 같다.
// => int + int = int
// => long + long = long
// => float + float = float
// => double + double = double
//
// 3) 다른 타입과 연산을 수행할 때는 
//    내부적으로 같은 타입으로 맞춘 다음에 실행한다.


long + int 는 long형식으로 더해짐
작은 메모리는 큰메모리로 맞춰짐
정수와 부동소수점을 연산할때는 정수데이터가 크든작든 부동소수점 데이터크기에 맞췅진다


// 정리!
// - 연산은 항상 같은 타입끼리만 가능하다.
// - 다른 타입끼리 연산을 할 때는 둘 중 한개의 타입을 다른 타입을 
//   바꿔야 한다.
// - 타입을 바꾸는 것을 내부적인 규칙에 따라 자동으로 처리한다고 해서
//   "암시적 형변환(implicit type conversion)"이라 부른다.
// - 암시적 형변환 규칙
//   다음과 같이 오른쪽 타입의 값으로 자동 변환시킨다.
//   byte,short,char => int => long => float => double
//
// - 정수와 부동소수점에 대해서만 암시적 형변환이 일어난다.
//   그 외 다른 타입은 불가능하다!

연산자 배움


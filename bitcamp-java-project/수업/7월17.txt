sing-mangitude 첫비트가 1일경우 음수 양수일경우 0 부동소수점에 사요아

1의보수 ->결과에 1을 더함 반대로 바꿈 -->이거는 안쓰는거

2의보수 ->1의보수에 +1을미리더해서 계산함 
//## 음수가 2의 보수로 저장되었을 때 이점
//- 덧셈으로 빼기를 수행할 수 있기 때문이다.
//  예) 10 - 7 = 10 + (-7) = 3
//      10      => 0000 1010
//      7       => 0000 0111
//      -7      => 1111 1000 + 1 = 1111 1001
//
//      0000 1010 (10)
//    + 1111 1001 (-7)
//    -----------------
//    1 0000 0011 (3)  => 8비트를 넘어가는 값은 버린다.
//

Excess-k 부동소수점에 사용함 java에서 127을 더한다 ex)-3 + 127= 0111 1100=124

       //0b0111_1011 <== +123 2진수
        //0b1000_0101 <== -123 2진수 (2의보수)
        //0b1111_1011 <== -123 Sign-Magnitude
        //0b0000_0100 <== -123 Excess-K(바이어스) =-123 + 127 =4

        /10101010_10101010_10101010_10101010 <== +aaaa_aaaa 2진수
        //01010101_01010101_01010101_01010110 <== -aaaa_aaaa 2진수 (2의보수)
        //55 55 55 55 56 <= 16진수/

